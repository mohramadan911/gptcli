#!/usr/bin/env python3

import argparse
import requests
import os
import platform
import sys

# Version constant
VERSION = "1.2.14"

API_KEY = os.getenv('OPENAI_API_KEY')
API_URL = 'https://api.openai.com/v1/chat/completions'

def get_version():
    return VERSION

def generate_command(prompt, model="gpt-3.5-turbo", temperature=0.5, max_tokens=100):
    headers = {'Authorization': f'Bearer {API_KEY}'}
    data = {
        'model': model,
        'prompt': prompt,
        'temperature': temperature,
        'max_tokens': max_tokens
    }
    response = requests.post(API_URL, headers=headers, json=data)
    try:
        generated_text = response.json()['choices'][0]['message']['content'].strip()
        return generated_text
    except KeyError as e:
        return f"Error generating command: {str(e)}"

def determine_file_type(generated_command):
    if "YAML" in generated_command or "yaml" in generated_command:
        return "yaml"
    elif "JSON" in generated_command or "json" in generated_command:
        return "json"
    elif "text file" in generated_command:
        return "txt"
    else:
        return input("Unable to determine the file type. Please specify (txt, tf, py, json, yaml, etc.): ").strip()

def create_file(file_content, file_type):
    file_name = f"gpt_file.{file_type}"
    with open(file_name, 'w') as file:
        file.write(file_content)
    print(f"File '{file_name}' has been created successfully.")

def setup_cli_parser():
    # Modified parser to handle --version and --help globally
    parser = argparse.ArgumentParser(description="Generate commands using OpenAI's GPT-3.5",
                                     formatter_class=argparse.RawTextHelpFormatter, add_help=False)
    parser.add_argument('-v', '--version', action='store_true', help='Show the version number and exit')
    parser.add_argument('-h', '--help', action='store_true', help='Show this help message and exit')

    subparsers = parser.add_subparsers(dest='command', help='sub-command help')

    parser_bash = subparsers.add_parser('bash', help='Generate bash commands')
    parser_bash.add_argument('query', type=str, help="The task description for bash")

    parser_terraform = subparsers.add_parser('terraform', help='Generate Terraform modules')
    parser_terraform.add_argument('query', type=str, help="The task description for terraform")

    parser_general = subparsers.add_parser('want', help='General purpose command generation')
    parser_general.add_argument('query', type=str, help="General query for command generation")

    return parser

def main():
    parser = setup_cli_parser()
    args, unknown = parser.parse_known_args()  # Use parse_known_args to handle --version or --help globally

    if args.version:
        print(f'gptcli {get_version()}')
        sys.exit(0)
    if args.help or not vars(args):
        parser.print_help()
        sys.exit(0)

    if args.command:
        # Adjust handling of args.query based on the selected subcommand
        prompt = f"{unknown[0]}" if unknown else ""
        print("Generating command, please wait...\n")
        generated_command = generate_command(prompt)
        print("Suggested Command:\n")
        print(generated_command)
    else:
        # This block is now redundant because argparse will handle --help automatically
        # But it's kept here for any additional custom help messages or behaviors
        parser.print_help()

    # Your existing code for command execution remains unchanged

if __name__ == "__main__":
    main()