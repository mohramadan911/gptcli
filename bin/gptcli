#!/usr/bin/env python3

import argparse
import requests
import os
import json

API_KEY = os.getenv('OPENAI_API_KEY')
API_URL = 'https://api.openai.com/v1/chat/completions'

def generate_command(prompt, model="gpt-3.5-turbo", temperature=0.5, max_tokens=100):
    headers = {'Authorization': f'Bearer {API_KEY}'}
    data = {
        'model': model,
        'messages': [{"role": "user", "content": prompt}],
    }
    response = requests.post(API_URL, headers=headers, json=data)
    try:
        generated_text = response.json()['choices'][0]['message']['content'].strip()
        return generated_text
    except KeyError as e:
        return f"Error generating command: {str(e)}"

def create_file_based_on_suggestion(suggestion):
    # Extracting file type and name from suggestion if possible
    # This is a simplified example and might need adjustments based on the model's output
    if "text file" in suggestion:
        file_name = "example.txt"
    elif "yaml" in suggestion:
        file_name = "example.yaml"
    elif "json" in suggestion:
        file_name = "example.json"
    else:
        print("Could not determine the file type from the suggestion.")
        return
    
    file_path = os.path.join(os.getcwd(), file_name)
    with open(file_path, 'w') as file:
        file.write("# Generated based on GPT suggestion\n")
        print(f"File '{file_name}' has been created successfully in the current directory.")

def setup_cli_parser():
    parser = argparse.ArgumentParser(description="Generate commands using OpenAI's GPT-3.5")
    parser.add_argument('query', type=str, help="The task description")
    
    return parser

def main():
    parser = setup_cli_parser()
    args = parser.parse_args()

    print("Generating command, please wait...\n")
    generated_command = generate_command(args.query)
    print("Suggested Command:\n")
    print(generated_command)

    action_confirmation = input("Do you want to proceed with the suggested action? (yes/no): ").strip().lower()
    if action_confirmation == 'yes':
        create_file_based_on_suggestion(generated_command)
    else:
        print("Action declined.")

if __name__ == "__main__":
    main()